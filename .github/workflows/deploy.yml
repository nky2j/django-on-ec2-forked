name: Django Deployment

on:
  push:
    branches:
      - ec2_django

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up SSH key from multiline secret
    - name: Set up SSH
      run: |
        # Create the .ssh directory if it doesn't exist
        mkdir -p ~/.ssh
        # Write the SSH private key to a file and preserve line breaks
        echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ssh_key.pem
        # Ensure the key has the correct permissions
        chmod 400 ssh_key.pem
        # Add EC2 host to known hosts to avoid host verification prompts
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    # Step 3: Check and add the public key to the EC2 instance
    - name: Add Public Key to EC2 Instance
      run: |
        # Extract the public key from the private key
        PUBLIC_KEY=$(ssh-keygen -y -f ssh_key.pem)
        
        # Connect to the EC2 instance and append the public key to authorized_keys if not present
        ssh -o StrictHostKeyChecking=no -i ssh_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          if ! grep -q "${PUBLIC_KEY}" ~/.ssh/authorized_keys; then
            echo "${PUBLIC_KEY}" >> ~/.ssh/authorized_keys
            chmod 600 ~/.ssh/authorized_keys
            echo "Public key added to authorized_keys"
          else
            echo "Public key already exists in authorized_keys"
          fi
        EOF

        echo "Current directory: $(pwd)"
        ls -la

    # Step 4: List the contents of the destination directory on the EC2 instance
    - name: List Destination Directory on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ssh_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          echo "Listing contents of Destination Directory on EC2:"
          ls -la
        EOF


    # Step 5: Create the django_ec2_deploy directory and copy the project files to the EC2 instance using SCP
    - name: Create Directory and Copy files via SCP
      run: |
          # Check if the django_ec2_deploy directory exists, if not create it
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            if [ ! -d "~/django_ec2_deploy" ]; then
               mkdir -p ~/django_ec2_deploy
            fi
          EOF

          # Use rsync to copy only new or changed files while excluding ssh_key.pem
          rsync -avz --exclude='ssh_key.pem' -e "ssh -i ssh_key.pem -o StrictHostKeyChecking=no" \
          /home/runner/work/django-on-ec2-forked/django-on-ec2-forked/ \
          ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/django_ec2_deploy/


    # Step 6: List the contents of the django_ec2_deploy directory to verify files were copied
    - name: List Contents of django_ec2_deploy Directory on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i ssh_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          echo "Listing contents of django_ec2_deploy Directory on EC2:"
          ls -la ~/django_ec2_deploy
        EOF

    # Step 7: Run commands on the EC2 instance to set up the Django application
    #- name: Run SSH Commands
    #  run: |
    #    ssh -o StrictHostKeyChecking=no -i ssh_key.pem ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
    #      # Change to the Django project directory
    #     cd /path/to/django/project
    #      # Activate the virtual environment
    #      source /path/to/venv/bin/activate
    #      # Install required Python packages
    #      pip install -r requirements.txt
    #      # Run Django database migrations
    #      python manage.py migrate
    #      # Collect static files for Django
    #      python manage.py collectstatic --noinput
    #      # Restart the Gunicorn service (WSGI server)
    #      sudo systemctl restart gunicorn
    #      # Restart the Nginx web server
    #      sudo systemctl restart nginx
    #    EOF
